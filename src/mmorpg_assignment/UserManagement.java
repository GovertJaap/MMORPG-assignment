/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mmorpg_assignment;

import java.awt.GridLayout;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Collection;
import java.util.Date;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Govert Jaap
 * @author Luuk Tito        
 */
public class UserManagement extends javax.swing.JFrame {

    public String usernameLogIn = "";
    public Integer balanceCurrent = 0;
    public Integer slotsCurrent = 0;
    public Integer monthsCurrent = 0;
    public Collection<Characters> characters = null;
    public Integer charactersAmount = 0;
    public Collection<Servers> servers = null;
    public Servers connectedServer = null;
        
    /**
     * Creates new form NewJFrame
     */
    public UserManagement(String username) {
        usernameLogIn = username;
        initComponents();
        
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("MMORPG_assignmentPU");
        EntityManager em = emf.createEntityManager();
        em.getTransaction().begin();
        
        Users checkUser = em.find(Users.class, usernameLogIn);
        balanceCurrent = checkUser.getBalance();
        MoneyAmountTxtfield1.setText("€ " + balanceCurrent.toString() + ",-"); 
        slotsCurrent = checkUser.getCharacterSlots();
        SlotsTxtfield1.setText(slotsCurrent.toString());
        monthsCurrent = checkUser.getMonthsPayed();
        SubscriptionAmountTxtfield.setText(monthsCurrent.toString());
        characters = checkUser.getCharactersCollection();
        characterSlotsCurrentText.setText(slotsCurrent.toString());
        charactersCurrentText1.setText(Integer.toString(characters.size()));
        
        servers = em.createNamedQuery("Servers.findAll").getResultList();
        
        updateCharacters();
        updateCharacterInfo();
        updateServers();

        jComboBox2.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    updateCharacterInfo();
                }
            }
        });
        
        em.getTransaction().commit();
        em.close();
        emf.close();
        
        MoneyAmountTxtfield.addFocusListener(new FocusListener() {
            public void focusGained(FocusEvent e) { 
                 MoneyAmountTxtfield.setText("");
            }
             public void focusLost(FocusEvent e) { 
            }
        });
                
        SlotsTxtfield.addFocusListener(new FocusListener() {
            public void focusGained(FocusEvent e) { 
                 SlotsTxtfield.setText("");
            }
             public void focusLost(FocusEvent e) { 
            }
        });
        
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
        public void run() {
            disconnectServer();
        }
        }));
    }
    
    public UserManagement() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Backbutton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        MoneyAmountTxtfield = new javax.swing.JTextField();
        MoneyTransaction = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        SubscriptionMonth1 = new javax.swing.JRadioButton();
        SubscriptionMonth2 = new javax.swing.JRadioButton();
        SubscriptionMonth3 = new javax.swing.JRadioButton();
        SubscriptionMonth4 = new javax.swing.JRadioButton();
        RenewButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        SlotsTxtfield = new javax.swing.JTextField();
        SlotsButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        MoneyAmountTxtfield1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        SlotsTxtfield1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        SubscriptionAmountTxtfield = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        characterSlotsCurrentText = new javax.swing.JTextField();
        charactersCurrentText1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        createCharacter = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        serverConnectButton = new javax.swing.JButton();
        Backbutton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(775, 400));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("User Management");

        Backbutton.setText("Back");
        Backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackbuttonActionPerformed(evt);
            }
        });

        jLabel2.setText("Add money: ");

        MoneyAmountTxtfield.setText("Amount");
        MoneyAmountTxtfield.setToolTipText("");
        MoneyAmountTxtfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoneyAmountTxtfieldActionPerformed(evt);
            }
        });

        MoneyTransaction.setText("Complete transaction");
        MoneyTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoneyTransactionActionPerformed(evt);
            }
        });

        jLabel3.setText("Renew Subscription:");

        buttonGroup1.add(SubscriptionMonth1);
        SubscriptionMonth1.setText("1 month (€ 5,-)");

        buttonGroup1.add(SubscriptionMonth2);
        SubscriptionMonth2.setText("2 months (€ 8,-)");

        buttonGroup1.add(SubscriptionMonth3);
        SubscriptionMonth3.setText("3 months (€ 10,-)");
        SubscriptionMonth3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubscriptionMonth3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(SubscriptionMonth4);
        SubscriptionMonth4.setText("1 year (€ 35,-)");
        SubscriptionMonth4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubscriptionMonth4ActionPerformed(evt);
            }
        });

        RenewButton.setText("Renew");
        RenewButton.setActionCommand("");
        RenewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RenewButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Buy character slots (€ 1,-):");

        SlotsTxtfield.setText("Amount");

        SlotsButton.setText("Buy slot(s)");
        SlotsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SlotsButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Current balance:");

        MoneyAmountTxtfield1.setEditable(false);
        MoneyAmountTxtfield1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoneyAmountTxtfield1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Current amount of slots:");

        SlotsTxtfield1.setEditable(false);

        jLabel7.setText("Months Left:");

        SubscriptionAmountTxtfield.setEditable(false);
        SubscriptionAmountTxtfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubscriptionAmountTxtfieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Backbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(MoneyAmountTxtfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(MoneyAmountTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(MoneyTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(49, 49, 49)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(SubscriptionMonth1)
                                            .addComponent(jLabel3)
                                            .addComponent(SubscriptionMonth2)
                                            .addComponent(SubscriptionMonth3)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(RenewButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(SubscriptionMonth4, javax.swing.GroupLayout.Alignment.LEADING))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SubscriptionAmountTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(51, 51, 51)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SlotsTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(SlotsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(SlotsTxtfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(278, 278, 278)
                                .addComponent(jLabel1)))
                        .addGap(0, 46, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(SubscriptionAmountTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(MoneyAmountTxtfield1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(MoneyAmountTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MoneyTransaction))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SubscriptionMonth1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SubscriptionMonth2))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SlotsTxtfield1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(SlotsTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SlotsButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SubscriptionMonth3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SubscriptionMonth4)
                .addGap(18, 18, 18)
                .addComponent(RenewButton)
                .addGap(29, 29, 29)
                .addComponent(Backbutton)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("User Managment", jPanel1);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel8.setText("Character Management");

        jLabel9.setText("Current amount of character slots:");

        jLabel10.setText("Current amount characters:");

        characterSlotsCurrentText.setEditable(false);
        characterSlotsCurrentText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                characterSlotsCurrentTextActionPerformed(evt);
            }
        });

        charactersCurrentText1.setEditable(false);
        charactersCurrentText1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charactersCurrentText1ActionPerformed(evt);
            }
        });

        jLabel11.setText("<html>\n<p>Create new character:</p>\n<p>(Requires free slot)</p>\n</html>");

        createCharacter.setText("Create");
        createCharacter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCharacterActionPerformed(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel12.setText("Select server to join:");

        jLabel13.setText("Select character:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setText("Character Info:");

        jTextField1.setEditable(false);

        jLabel15.setText("Name:");

        jLabel16.setText("Class:");

        jTextField2.setEditable(false);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel17.setText("Race:");

        jTextField3.setEditable(false);

        jTextField4.setEditable(false);

        jLabel18.setText("Level:");

        serverConnectButton.setText("Go Online!");
        serverConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverConnectButtonActionPerformed(evt);
            }
        });

        Backbutton1.setText("Back");
        Backbutton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Backbutton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(246, 246, 246))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createCharacter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(characterSlotsCurrentText)
                            .addComponent(charactersCurrentText1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addGap(66, 66, 66)
                                        .addComponent(jLabel18))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addGap(66, 66, 66)
                                        .addComponent(jLabel16)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel14)
                                .addGap(184, 184, 184)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(serverConnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, 100, Short.MAX_VALUE))
                        .addGap(35, 35, 35))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(Backbutton1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(characterSlotsCurrentText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(charactersCurrentText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(createCharacter, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14)
                            .addComponent(serverConnectButton))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(Backbutton1)
                .addGap(60, 60, 60))
        );

        jTabbedPane1.addTab("Character Management", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SubscriptionMonth3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubscriptionMonth3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SubscriptionMonth3ActionPerformed

    private void MoneyTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoneyTransactionActionPerformed
        Transaction(MoneyAmountTxtfield.getText());
    }//GEN-LAST:event_MoneyTransactionActionPerformed

    private void RenewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RenewButtonActionPerformed
        Renew();
    }//GEN-LAST:event_RenewButtonActionPerformed

    private void SlotsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SlotsButtonActionPerformed
        Slots(SlotsTxtfield.getText());
    }//GEN-LAST:event_SlotsButtonActionPerformed

    private void BackbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackbuttonActionPerformed
        disconnectServer();
        this.dispose();
        try {
            new LoginScreen().setVisible(true);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BackbuttonActionPerformed

    private void MoneyAmountTxtfield1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoneyAmountTxtfield1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MoneyAmountTxtfield1ActionPerformed

    private void MoneyAmountTxtfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoneyAmountTxtfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MoneyAmountTxtfieldActionPerformed

    private void SubscriptionAmountTxtfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubscriptionAmountTxtfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SubscriptionAmountTxtfieldActionPerformed

    private void SubscriptionMonth4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubscriptionMonth4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SubscriptionMonth4ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void charactersCurrentText1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charactersCurrentText1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_charactersCurrentText1ActionPerformed

    private void characterSlotsCurrentTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_characterSlotsCurrentTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_characterSlotsCurrentTextActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void createCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCharacterActionPerformed
        createCharacter();
    }//GEN-LAST:event_createCharacterActionPerformed

    private void serverConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverConnectButtonActionPerformed
        connectServer();
    }//GEN-LAST:event_serverConnectButtonActionPerformed

    private void Backbutton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Backbutton1ActionPerformed
        disconnectServer();
        this.dispose();
        try {
            new LoginScreen().setVisible(true);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Backbutton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserManagement().setVisible(true);
            }
        });
    }
    
    private void updateServers() {
        jComboBox1.removeAllItems();
        for (int i = 0; i < servers.size(); i++) {
            Collection<Servers> servers2 = servers;
            while (servers2.iterator().hasNext() == true) {
                jComboBox1.addItem(servers2.iterator().next().getName());
                servers2.remove(servers2.iterator().next());
            }
        }
    }
    
    private void disconnectServer() {
        if (connectedServer != null) {
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("MMORPG_assignmentPU");
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();

            connectedServer.setConnectedUsers(connectedServer.getConnectedUsers() - 1);
            Query query = em.createNativeQuery("Delete from stores where (user_name)=(?);");
            query.setParameter(1, usernameLogIn);
            query.executeUpdate();
            em.merge(connectedServer);

            em.getTransaction().commit();
            em.close();
            emf.close();
            connectedServer = null;
        }
    }
    
    private void connectServer() {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("MMORPG_assignmentPU");
        EntityManager em = emf.createEntityManager();
        em.getTransaction().begin();
        
        em.getEntityManagerFactory().getCache().evict(Users.class, usernameLogIn);
        Users checkUser = em.find(Users.class, usernameLogIn);

        if (jComboBox2.getItemAt(0) != "You have no characters") {
            if (checkUser.getBanned() == true) {
                JOptionPane.showConfirmDialog(null, "Sorry, you cannot play whilst your account is banned", "Alert", JOptionPane.PLAIN_MESSAGE);
            }
            else if (checkUser.getMonthsPayed() == 0) {
                JOptionPane.showConfirmDialog(null, "Sorry your subscription has expired!", "Alert", JOptionPane.PLAIN_MESSAGE);
            }
            else if (connectedServer != null) {
                JOptionPane.showConfirmDialog(null, "You're already connected to a server, please exit the program to try again", "Alert", JOptionPane.PLAIN_MESSAGE);
            }
            else {
                Servers server = (Servers) em.createNamedQuery("Servers.findByName").setParameter("name", jComboBox1.getSelectedItem().toString()).getSingleResult();
                if (server.getConnectedUsers() < server.getMaxUsers()) {
                    server.setConnectedUsers(server.getConnectedUsers() + 1);
                    Query query = em.createNativeQuery( "insert into stores (adress,user_name) values (?,?);");
                    query.setParameter(1, server.getAdress());
                    query.setParameter(2, usernameLogIn);
                    query.executeUpdate();
                    connectedServer = server;
                    JOptionPane.showConfirmDialog(null, "You've succesfully connected to our server!", "Succes", JOptionPane.PLAIN_MESSAGE);
                }
                else {
                    JOptionPane.showConfirmDialog(null, "Sorry this server is full, please select another one.", "Alert", JOptionPane.PLAIN_MESSAGE);
                }
            }
        }
        else {
            JOptionPane.showConfirmDialog(null, "Please select a character first", "Alert", JOptionPane.PLAIN_MESSAGE);
        }
        
        em.getTransaction().commit();
        em.close();
        emf.close();
    }
    
    private void updateCharacters() {
        jComboBox2.removeAllItems();
        if (characters.size() > 0) {
            Collection<Characters> characters2 = characters;
            while (characters2.iterator().hasNext() == true) {
                jComboBox2.addItem(characters2.iterator().next().getName());
                characters2.remove(characters2.iterator().next());
            }
        }
        else {
            jComboBox2.addItem("You have no characters");
        }
    }
    
    private void updateCharacterInfo() {
        if (jComboBox2.getItemAt(0) != "You have no characters") {
            String characterName = jComboBox2.getSelectedItem().toString();
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("MMORPG_assignmentPU");
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();

            Characters checkCharacter = em.find(Characters.class, characterName);
            jTextField1.setText(characterName);
            jTextField2.setText(checkCharacter.getClass1());
            jTextField3.setText(checkCharacter.getRace());
            jTextField4.setText(checkCharacter.getLevel().toString());
            
            em.getTransaction().commit();
            em.close();
            emf.close();

        }
    }
    
    private void createCharacter() {
        if (characters.size() < slotsCurrent) {
            String[] classes = { "Warrior", "Thief", "Mage", "Ranger" };
            String[] races = { "Human", "Elf", "Dwarf", "Sorceress", "Witcher" };
       
            JPanel newCharacter = new JPanel(new GridLayout(0,1));
            JTextField nameField = new JTextField();
            JComboBox classField = new JComboBox(classes);
            JComboBox raceField = new JComboBox(races);
            newCharacter.add(new JLabel("Name: "));
            newCharacter.add(nameField);
            newCharacter.add(new JLabel("Class: "));
            newCharacter.add(classField);
            newCharacter.add(new JLabel("Race: "));
            newCharacter.add(raceField);

            int result = JOptionPane.showConfirmDialog(null, newCharacter, "Create character", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (result == JOptionPane.OK_OPTION) {
                String characterName = nameField.getText();
                String className = classField.getSelectedItem().toString();
                String raceName = raceField.getSelectedItem().toString();
                if (!characterName.equals("")) {
                    EntityManagerFactory emf = Persistence.createEntityManagerFactory("MMORPG_assignmentPU");
                    EntityManager em = emf.createEntityManager();
                    em.getTransaction().begin();
                    em.getEntityManagerFactory().getCache().evict(Users.class, usernameLogIn);

                    Characters checkCharacter = em.find(Characters.class, characterName);
                    if (checkCharacter == null) {
                        
                        Random rand = new Random();
                        int level = rand.nextInt(100) + 1;
                        Characters newCharacterData = new Characters(characterName, className, raceName, level);
                        
                        em.persist(newCharacterData);   
                        Query query = em.createNativeQuery( "insert into owns (name,user_name) values (?,?);");
                        query.setParameter(1, characterName);
                        query.setParameter(2, usernameLogIn);
                        query.executeUpdate();

                        Users checkUser = em.find(Users.class, usernameLogIn);
                        characters = checkUser.getCharactersCollection();
                        charactersCurrentText1.setText(Integer.toString(characters.size()));
                        
                        em.getTransaction().commit();
                        em.close();
                        emf.close();

                        
                        updateCharacters();
                        updateCharacterInfo();
                        JOptionPane.showConfirmDialog(null, "Your character was succesfully created!", "Succes", JOptionPane.PLAIN_MESSAGE);
                    }
                    else {
                        JOptionPane.showConfirmDialog(null, "This character name was already taken.", "Failure", JOptionPane.PLAIN_MESSAGE);
                        createCharacter();
                    }
                }
                else {
                    JOptionPane.showConfirmDialog(null, "Not all fields were filled in", "Error", JOptionPane.PLAIN_MESSAGE);
                    createCharacter();
                }
            } 
        }
        else {
            JOptionPane.showConfirmDialog(null, "Sorry you don't have enough free character slots!", "Alert",JOptionPane.PLAIN_MESSAGE);
        }
    }
    
    private void Transaction (String Amount) {
        Integer AmountIntBalance = null;
        try {
            AmountIntBalance = Integer.parseInt(Amount);
        }
        catch (NumberFormatException e) {
            JOptionPane.showConfirmDialog(null, "You didn't fill in a valid input", "Alert",JOptionPane.PLAIN_MESSAGE);
        }
        if (AmountIntBalance != null) {
            if (AmountIntBalance < 0) {
                JOptionPane.showConfirmDialog(null, "You can't enter a negative number", "Alert",JOptionPane.PLAIN_MESSAGE);
            }
            else {
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("MMORPG_assignmentPU");
                EntityManager em = emf.createEntityManager();

                em.getTransaction().begin();
                Users checkUser = em.find(Users.class, usernameLogIn);
                balanceCurrent = checkUser.getBalance();
                balanceCurrent = balanceCurrent + AmountIntBalance;
                checkUser.setBalance(balanceCurrent);
                MoneyAmountTxtfield1.setText("€ " + balanceCurrent.toString() + ",-");       
                em.getTransaction().commit();
                em.close();
                emf.close(); 
                JOptionPane.showConfirmDialog(null, "You've succesfully added € " + AmountIntBalance + ",- to your balance", "Succes",JOptionPane.PLAIN_MESSAGE);
            }
        } 
    }
    
    private void Slots (String Amount) {
        Integer AmountIntSlots = null;
        try {
            AmountIntSlots = Integer.parseInt(Amount);
        }
        catch (NumberFormatException e) {
            JOptionPane.showConfirmDialog(null, "You didn't fill in a valid input", "Alert",JOptionPane.PLAIN_MESSAGE);
        }
        if(AmountIntSlots != null) {
            if (AmountIntSlots < 0) {
                JOptionPane.showConfirmDialog(null, "You can't enter a negative number", "Alert",JOptionPane.PLAIN_MESSAGE);
            }
            else if (AmountIntSlots > balanceCurrent) {
                JOptionPane.showConfirmDialog(null, "You don't have enough money to buy that many slots!", "Alert",JOptionPane.PLAIN_MESSAGE);
            }
            else {
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("MMORPG_assignmentPU");
                EntityManager em = emf.createEntityManager();

                em.getTransaction().begin();
                Users checkUser = em.find(Users.class, usernameLogIn);
                slotsCurrent = slotsCurrent + AmountIntSlots;
                checkUser.setCharacterSlots(slotsCurrent);
                SlotsTxtfield1.setText(slotsCurrent.toString());
                characterSlotsCurrentText.setText(slotsCurrent.toString());
                balanceCurrent = balanceCurrent - AmountIntSlots;
                checkUser.setBalance(balanceCurrent);
                MoneyAmountTxtfield1.setText("€ " + balanceCurrent.toString() + ",-");       
                em.getTransaction().commit();
                em.close();
                emf.close();
            }
        }          
    }
    
    private void Renew() {
        if (buttonGroup1.getSelection() == null) {
            JOptionPane.showConfirmDialog(null, "You didn't select a subscription amount", "Alert",JOptionPane.PLAIN_MESSAGE);
        }
        else {
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("MMORPG_assignmentPU");
            EntityManager em = emf.createEntityManager();

            em.getTransaction().begin();
            Users checkUser = em.find(Users.class, usernameLogIn);

            if (SubscriptionMonth1.isSelected() == true) {
                if (balanceCurrent >= 5) {
                    balanceCurrent = balanceCurrent - 5;
                    checkUser.setBalance(balanceCurrent);
                    MoneyAmountTxtfield1.setText("€ " + balanceCurrent.toString() + ",-");
                    monthsCurrent = monthsCurrent + 1;
                    checkUser.setMonthsPayed(monthsCurrent);
                    SubscriptionAmountTxtfield.setText(monthsCurrent.toString());
                    checkUser.setLastPayment(new Date());
                    JOptionPane.showConfirmDialog(null, "You've succesfully added 1 month of subscription to your account", "Succes",JOptionPane.PLAIN_MESSAGE);
                }
                else {
                    JOptionPane.showConfirmDialog(null, "Sorry you don't have enough money for that subscription", "Alert",JOptionPane.PLAIN_MESSAGE);
                }
            }
            else if (SubscriptionMonth2.isSelected() == true){
                if (balanceCurrent >= 8) {
                    balanceCurrent = balanceCurrent - 8;
                    checkUser.setBalance(balanceCurrent);
                    MoneyAmountTxtfield1.setText("€ " + balanceCurrent.toString() + ",-");
                    monthsCurrent = monthsCurrent + 2;
                    checkUser.setMonthsPayed(monthsCurrent);
                    SubscriptionAmountTxtfield.setText(monthsCurrent.toString());
                    checkUser.setLastPayment(new Date());
                    JOptionPane.showConfirmDialog(null, "You've succesfully added 2 months of subscription to your account", "Succes",JOptionPane.PLAIN_MESSAGE);
                }
                else {
                    JOptionPane.showConfirmDialog(null, "Sorry you don't have enough money for that subscription", "Alert",JOptionPane.PLAIN_MESSAGE);
                }
            }
            else if (SubscriptionMonth3.isSelected() == true){
                if (balanceCurrent >= 10) {
                    balanceCurrent = balanceCurrent - 10;
                    checkUser.setBalance(balanceCurrent);
                    MoneyAmountTxtfield1.setText("€ " + balanceCurrent.toString() + ",-");
                    monthsCurrent = monthsCurrent + 3;
                    checkUser.setMonthsPayed(monthsCurrent);
                    SubscriptionAmountTxtfield.setText(monthsCurrent.toString());
                    checkUser.setLastPayment(new Date());
                    JOptionPane.showConfirmDialog(null, "You've succesfully added 3 months of subscription to your account", "Succes",JOptionPane.PLAIN_MESSAGE);
                }
                else {
                    JOptionPane.showConfirmDialog(null, "Sorry you don't have enough money for that subscription", "Alert",JOptionPane.PLAIN_MESSAGE);
                }
            }     
            else {
                if (balanceCurrent >= 35) {
                    balanceCurrent = balanceCurrent - 35;
                    checkUser.setBalance(balanceCurrent);
                    MoneyAmountTxtfield1.setText("€ " + balanceCurrent.toString() + ",-");
                    monthsCurrent = monthsCurrent + 12;
                    checkUser.setMonthsPayed(monthsCurrent);
                    SubscriptionAmountTxtfield.setText(monthsCurrent.toString());
                    checkUser.setLastPayment(new Date());
                    JOptionPane.showConfirmDialog(null, "You've succesfully added 1 year of subscription to your account", "Succes",JOptionPane.PLAIN_MESSAGE);
                }
                else {
                    JOptionPane.showConfirmDialog(null, "Sorry you don't have enough money for that subscription", "Alert",JOptionPane.PLAIN_MESSAGE);
                }
            }
            em.getTransaction().commit();
            em.close();
            emf.close();
        }    
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Backbutton;
    private javax.swing.JButton Backbutton1;
    private javax.swing.JTextField MoneyAmountTxtfield;
    private javax.swing.JTextField MoneyAmountTxtfield1;
    private javax.swing.JButton MoneyTransaction;
    private javax.swing.JButton RenewButton;
    private javax.swing.JButton SlotsButton;
    private javax.swing.JTextField SlotsTxtfield;
    private javax.swing.JTextField SlotsTxtfield1;
    private javax.swing.JTextField SubscriptionAmountTxtfield;
    private javax.swing.JRadioButton SubscriptionMonth1;
    private javax.swing.JRadioButton SubscriptionMonth2;
    private javax.swing.JRadioButton SubscriptionMonth3;
    private javax.swing.JRadioButton SubscriptionMonth4;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField characterSlotsCurrentText;
    private javax.swing.JTextField charactersCurrentText1;
    private javax.swing.JButton createCharacter;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JButton serverConnectButton;
    // End of variables declaration//GEN-END:variables
}
